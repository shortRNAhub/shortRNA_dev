#' @importFrom rtracklayer import.chain liftOver
#'
#' @return A list of databases (DNAstringSet or GRanges)
#'
#' @export
getDB <- function(species = "mmu", genomeVersion = "GRCm38",
ensemblVer = "102",
tRNA_addCCA = TRUE, tRNA_includeMt = TRUE,
rRNA_release = "138.1") {
config <- httr::config(ssl_verifypeer = 0, ssl_verifyhost = 0)
tt <- options()$timeout
options(timeout = 6000)
if (species == "mmu") {
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
# tRNA
if (genomeVersion == "GRCm38") {
tRNA <- gettRNA(sp = "mm10", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
} else if (genomeVersion == "GRCm39") {
tRNA <- gettRNA(sp = "mm39", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
}
# piRNA precursors
data("piRNA_mmu")
piRNA <- piRNA_mmu
piRNA <- piRNA[piRNA$type == "transcript"]
colnames(mcols(piRNA))[5:7] <- c("symbol", "tx_id", "tx_type")
piRNA <- piRNA[, c("symbol", "tx_id", "tx_type")]
if (genomeVersion == "GRCm39") {
R.utils::gunzip(
R.utils::downloadFile(paste0(
"http://hgdownload.soe.ucsc.edu/goldenPath/mm10/",
"liftOver/mm10ToMm39.over.chain.gz"
))
)
chain <- rtracklayer::import.chain("mm10ToMm39.over.chain")
miRNA <- unlist(rtracklayer::liftOver(miRNA, chain))
piRNA <- unlist(rtracklayer::liftOver(piRNA, chain))
unlink("mm10ToMm39.over.chain")
}
# rRNA
rRNA <- getrRNA(sp = "Mus musculus", release = rRNA_release)
db <- list(
ensdb = ensdb,
miRNA_GR = miRNA,
tRNA_fa = tRNA,
piRNA_GR = piRNA,
rRNA_fa = rRNA
)
return(db)
} else if (species == "hsa") {
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
# tRNA
if (genomeVersion == "GRCh38") {
tRNA <- gettRNA(sp = "hg38", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
} else if (genomeVersion == "GRCh19") {
tRNA <- gettRNA(sp = "hg19", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
}
# rRNA
rRNA <- getrRNA(sp = "Homo sapiens", release = rRNA_release)
db <- list(
ensdb = ensdb,
miRNA_GR = miRNA,
tRNA_fa = tRNA,
rRNA_fa = rRNA
)
config <- httr::config(ssl_verifypeer = 1, ssl_verifyhost = 1)
options(timeout = tt)
return(db)
}
}
# devtools::load_all("../")
#
# db_hg38 <- getDB(species = "hsa", genomeVersion = "GRCh38", ensemblVer = "102")
#
# hg38_annoprep <- prepareAnnotation(
#   ensdb = db_hg38$ensdb,
#   genome = "/mnt/IM/reference/genome/gencode/hg38/fasta/GRCh38.p13.genome.fa",
#   output_dir = "../../shortRNA_reports/schratt_human/shortRNA/genome/",
#   extra.gr = list(miRNA = db_hg38$miRNA_GR),
#   extra.seqs = list(rRNA = db_hg38$rRNA_fa, tRNA = db_hg38$tRNA_fa),
#   resolveSplicing = NULL,
#   rules = defaultAssignRules(),
#   tRNAEnsembleRemove = TRUE,
#   clusterMiRNA = TRUE
# )
#
#
# db_mmu <- getDB()
#
# ensdb <- db_mmu$ensdb
# genome <- "/mnt/IM/reference/genome/gencode/fasta/GRCm38.p5.genome.fa"
# output_dir <- "/mnt/IM/projects/software/shortRNA/genome"
# extra.gr <- list(piRNA = db_mmu$piRNA_GR, miRNA = db_mmu$miRNA_GR)
# extra.seqs <- list(rRNA = db_mmu$rRNA_fa, tRNA = db_mmu$tRNA_fa)
# resolveSplicing <- NULL
# rules <- defaultAssignRules()
# tRNAEnsembleRemove <- TRUE
# clusterMiRNA <- TRUE
# mm10_annoprep <- prepareAnnotation(
#   ensdb = db_mmu$ensdb,
#   genome = "/mnt/IM/reference/genome/gencode/fasta/GRCm38.p5.genome.fa",
#   output_dir = "./",
#   extra.gr = list(piRNA = db_mmu$piRNA_GR, miRNA = db_mmu$miRNA_GR),
#   extra.seqs = list(rRNA = db_mmu$rRNA_fa, tRNA = db_mmu$tRNA_fa),
#   resolveSplicing = NULL,
#   rules = defaultAssignRules(),
#   tRNAEnsembleRemove = TRUE,
#   clusterMiRNA = TRUE
# )
# devtools::load_all("./")
# db_mmu <- getDB()
# mm10_annoprep <- prepareAnnotation(
#   ensdb = db_mmu$ensdb,
#   genome = "/mnt/IM/reference/genome/gencode/fasta/GRCm38.p5.genome.fa",
#   output_dir = "~/Desktop",
#   extra.gr = list(piRNA = db_mmu$piRNA_GR, miRNA = db_mmu$miRNA_GR),
#   extra.seqs = list(rRNA = db_mmu$rRNA_fa, tRNA = db_mmu$tRNA_fa),
#   resolveSplicing = NULL,
#   rules = defaultAssignRules(),
#   tRNAEnsembleRemove = TRUE,
#   clusterMiRNA = TRUE
# )
db_hg38 <- getDB(species = "hsa", genomeVersion = "GRCh38", ensemblVer = "102")
devtools::load_all("../")
devtools::load_all("./")
db_hg38 <- getDB(species = "hsa", genomeVersion = "GRCh38", ensemblVer = "102")
species = "hsa"
genomeVersion = "GRCh38"
ensemblVer = "102"
config <- httr::config(ssl_verifypeer = 0, ssl_verifyhost = 0)
tt <- options()$timeout
options(timeout = 6000)
if (species == "mmu") {
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
# tRNA
if (genomeVersion == "GRCm38") {
tRNA <- gettRNA(sp = "mm10", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
} else if (genomeVersion == "GRCm39") {
tRNA <- gettRNA(sp = "mm39", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
}
# piRNA precursors
data("piRNA_mmu")
piRNA <- piRNA_mmu
piRNA <- piRNA[piRNA$type == "transcript"]
colnames(mcols(piRNA))[5:7] <- c("symbol", "tx_id", "tx_type")
piRNA <- piRNA[, c("symbol", "tx_id", "tx_type")]
if (genomeVersion == "GRCm39") {
R.utils::gunzip(
R.utils::downloadFile(paste0(
"http://hgdownload.soe.ucsc.edu/goldenPath/mm10/",
"liftOver/mm10ToMm39.over.chain.gz"
))
)
chain <- rtracklayer::import.chain("mm10ToMm39.over.chain")
miRNA <- unlist(rtracklayer::liftOver(miRNA, chain))
piRNA <- unlist(rtracklayer::liftOver(piRNA, chain))
unlink("mm10ToMm39.over.chain")
}
# rRNA
rRNA <- getrRNA(sp = "Mus musculus", release = rRNA_release)
db <- list(
ensdb = ensdb,
miRNA_GR = miRNA,
tRNA_fa = tRNA,
piRNA_GR = piRNA,
rRNA_fa = rRNA
)
return(db)
} else if (species == "hsa") {
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
# tRNA
if (genomeVersion == "GRCh38") {
tRNA <- gettRNA(sp = "hg38", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
} else if (genomeVersion == "GRCh19") {
tRNA <- gettRNA(sp = "hg19", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
}
# rRNA
rRNA <- getrRNA(sp = "Homo sapiens", release = rRNA_release)
db <- list(
ensdb = ensdb,
miRNA_GR = miRNA,
tRNA_fa = tRNA,
rRNA_fa = rRNA
)
config <- httr::config(ssl_verifypeer = 1, ssl_verifyhost = 1)
options(timeout = tt)
return(db)
}
species = "mmu"
genomeVersion = "GRCm38"
ensemblVer = "102"
tRNA_addCCA = TRUE
tRNA_includeMt = TRUE
rRNA_release = "138.1"
config <- httr::config(ssl_verifypeer = 0, ssl_verifyhost = 0)
tt <- options()$timeout
options(timeout = 6000)
# EnsDb
ah <- AnnotationHub()
# EnsDb
ah <- AnnotationHub()
library(dbplyr)
devtools::load_all("./")
devtools::install(".")
renv::activate()
renv::update()
renv::upgrade()
renv::update()
renv::status()
renv::snapshot()
devtools::install(|.)
devtools::install(".")
library(shortRNA)
#   output_dir = "../../shortRNA_reports/schratt_human/shortRNA/genome/",
#   extra.gr = list(miRNA = db_hg38$miRNA_GR),
#   extra.seqs = list(rRNA = db_hg38$rRNA_fa, tRNA = db_hg38$tRNA_fa),
#   resolveSplicing = NULL,
#   rules = defaultAssignRules(),
#   tRNAEnsembleRemove = TRUE,
#   clusterMiRNA = TRUE
# )
#
#
db_mmu <- getDB()
species = "mmu"
genomeVersion = "GRCm38"
ensemblVer = "102"
tRNA_addCCA = TRUE
tRNA_includeMt = TRUE
rRNA_release = "138.1"
config <- httr::config(ssl_verifypeer = 0, ssl_verifyhost = 0)
tt <- options()$timeout
options(timeout = 6000)
if (species == "mmu") {
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
# tRNA
if (genomeVersion == "GRCm38") {
tRNA <- gettRNA(sp = "mm10", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
} else if (genomeVersion == "GRCm39") {
tRNA <- gettRNA(sp = "mm39", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
}
# piRNA precursors
data("piRNA_mmu")
piRNA <- piRNA_mmu
piRNA <- piRNA[piRNA$type == "transcript"]
colnames(mcols(piRNA))[5:7] <- c("symbol", "tx_id", "tx_type")
piRNA <- piRNA[, c("symbol", "tx_id", "tx_type")]
if (genomeVersion == "GRCm39") {
R.utils::gunzip(
R.utils::downloadFile(paste0(
"http://hgdownload.soe.ucsc.edu/goldenPath/mm10/",
"liftOver/mm10ToMm39.over.chain.gz"
))
)
chain <- rtracklayer::import.chain("mm10ToMm39.over.chain")
miRNA <- unlist(rtracklayer::liftOver(miRNA, chain))
piRNA <- unlist(rtracklayer::liftOver(piRNA, chain))
unlink("mm10ToMm39.over.chain")
}
# rRNA
rRNA <- getrRNA(sp = "Mus musculus", release = rRNA_release)
db <- list(
ensdb = ensdb,
miRNA_GR = miRNA,
tRNA_fa = tRNA,
piRNA_GR = piRNA,
rRNA_fa = rRNA
)
return(db)
} else if (species == "hsa") {
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
# tRNA
if (genomeVersion == "GRCh38") {
tRNA <- gettRNA(sp = "hg38", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
} else if (genomeVersion == "GRCh19") {
tRNA <- gettRNA(sp = "hg19", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
}
# rRNA
rRNA <- getrRNA(sp = "Homo sapiens", release = rRNA_release)
db <- list(
ensdb = ensdb,
miRNA_GR = miRNA,
tRNA_fa = tRNA,
rRNA_fa = rRNA
)
config <- httr::config(ssl_verifypeer = 1, ssl_verifyhost = 1)
options(timeout = tt)
return(db)
}
# EnsDb
ah <- AnnotationHub()
AnnotationHub()
AnnotationHub::AnnotationHub()
AnnotationHub::AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
library(AnnotationHub)
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
?AnnotationHub
ah = AnnotationHub()
devtools::install_version("dbplyr", version = "2.3.4")
library(BiocManager)
install("BiocFileCache")
# EnsDb
ah <- AnnotationHub()
# EnsDb
ah <- AnnotationHub()
library(shortRNA)
library(AnnotationHub)
# EnsDb
ah <- AnnotationHub()
rlang::last_trace()
library(dbplyr)
# EnsDb
ah <- AnnotationHub()
renv::install("dbplyr")
renv::install("AnnotationHub")
renv::install("AnnotationHub", rebuild = T)
renv::status()
.libPath()
.libPaths()
renv::settings
renv::settings$bioconductor.version()
renv::settings$external.libraries()
renv::settings$use.cache()
renv::settings$use.cache()
?renv::settings$use.cache()
?renv::settings
renv::paths$cache()
renv::paths$cache()
renv::status()
renv::init()
install.packages("renv")
renv::init()
.libPaths()
path <- renv::paths$library()
library(shortRNA)
db_mmu <- getDB()
config <- httr::config(ssl_verifypeer = 0, ssl_verifyhost = 0)
tt <- options()$timeout
options(timeout = 6000)
species == "mmu"
species = "mmu"
# EnsDb
ah <- AnnotationHub()
library(AnnotationHub\)
library(AnnotationHub)
# EnsDb
ah <- AnnotationHub()
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
genomeVersion = "GRCm38"
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
ensemblVer = "102"
# ensdb <- rev(query(ah, genomeVersion, "Ensdb"))[[1]]
ensdb <- query(ah, c(genomeVersion, "EnsDb", ensemblVer))[[1]]
ensdb
# miRNA
miRNA <- getmiRNA(sp = species)$gtf
miRNA
genomeVersion == "GRCm38"
tRNA <- gettRNA(sp = "mm10", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
tRNA_addCCA = TRUE
tRNA_includeMt = TRUE
rRNA_release = "138.1"
tRNA <- gettRNA(sp = "mm10", addCCA = tRNA_addCCA, mt = tRNA_includeMt)
sp = "mm10"
mt = TRUE
addCCA = TRUE
match.arg(sp, c("hg19", "hg38", "mm10", "mm39"))
url <- "http://gtrnadb.ucsc.edu/genomes/eukaryota/"
mt_sp <- NULL
if (sp == "hg19") {
url <- paste0(url, "Hsapi19/hg19-tRNAs.fa")
mt_sp <- "Homo sapiens"
} else if (sp == "hg38") {
url <- paste0(url, "Hsapi38/hg38-tRNAs.fa")
mt_sp <- "Homo sapiens"
} else if (sp == "mm10") {
url <- paste0(url, "Mmusc10/mm10-tRNAs.fa")
mt_sp <- "Mus musculus"
} else if (sp == "mm39") {
url <- paste0(url, "Mmusc39/mm39-tRNAs.fa")
mt_sp <- "Mus musculus"
}
trna <- readDNAStringSet(url)
trna <- Biostrings::readDNAStringSet(url)
trna
names(trna) <- trimws(gsub(
pattern = ".*_|\\(.*", replacement = "",
x = names(trna)
))
if (any(grepl("His", names(trna)))) {
trna <- as.character(trna)
# https://github.com/junchaoshi/sports1.1#trna_mappingpl
his <- trna[grepl("His", names(trna))]
his <- sapply(his, function(x) paste0("G", x))
trna[names(his)] <- his
trna <- DNAStringSet(trna)
}
trna <- Biostrings::DNAStringSet(trna)
if (any(grepl("His", names(trna)))) {
trna <- as.character(trna)
# https://github.com/junchaoshi/sports1.1#trna_mappingpl
his <- trna[grepl("His", names(trna))]
his <- sapply(his, function(x) paste0("G", x))
trna[names(his)] <- his
trna <- Biostrings::DNAStringSet(trna)
}
if (addCCA) {
trna_CCA <- paste0(as.character(trna), "CCA")
# names(trna_CCA) <- paste(names(trna), "CCA", sep = "_")
names(trna_CCA) <- names(trna)
trna <- DNAStringSet(trna_CCA)
}
if (addCCA) {
trna_CCA <- paste0(as.character(trna), "CCA")
# names(trna_CCA) <- paste(names(trna), "CCA", sep = "_")
names(trna_CCA) <- names(trna)
trna <- Biostrings::DNAStringSet(trna_CCA)
}
mt <- getMttRNA(sp = mt_sp, addCCA = addCCA)
?getMttRNA
getMttRNA(sp = "Mus musculus", addCCA = TRUE)
library(tRNAdb)
library(tRNAdbImport)
tRNAdbImport::import.mttRNAdb()
tab <- data.frame(
import.mttRNAdb(organism = sp)
)[, c("tRNA_length", "tRNA_type", "tRNA_anticodon", "tRNA_seq")]
?import.mttRNAdb
import.tRNAdb(organism = "Saccharomyces cerevisiae",
aminoacids = c("Phe","Ala"))
import.tRNAdb.id
TRNA_DB_URL
TRNA_DB_URL_MT
devtools::document()
devtools::document()
renv::install("ape")
renv::status()
renv::snapshot()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('indexRsubread')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install(".")
devtools::document()
devtools::document()
devtools::document()
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::document()
devtools::install(".")
devtools::document()
devtools::install(".")
devtools::install(".")
devtools::document()
devtools::install(".")
devtools::document()
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::document()
devtools::install(".")
devtools::check()
devtools::check()
